service: BugatchiMobileDataPipeLine

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-plugin-existing-s3
  - serverless-plugin-tracing
  - serverless-plugin-lambda-dead-letter
  - serverless-s3-local
  - serverless-offline-scheduler
  - serverless-offline

custom:
  private: ${file(./private.yml)}
  default_stage: ${self:custom.private.stage}
  stage: ${opt:stage, self:custom.default_stage}
  accountId: { Ref: AWS::AccountId }
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false
      #      noStart: true
      convertEmptyValues: true
  serverless-offline:
    port: 4000
  bucketArn:
    Fn::Join:
    - ''
    - - 'arn:aws:s3:::'
      - Ref: localbucket
      - '/*'
  s3:
    host: 0.0.0.0
    port: 8080
    directory: /tmp

provider:
  name: aws
  stage: dev
  region: us-east-1
  profile: serverless-admin
  runtime: nodejs8.10
  tracing: true
  environment:
    ATHENA_S3_BUCKET: ${file(./config.yml):ATHENA_S3_BUCKET}
    FTP_S3_BUCKET: ${file(./config.yml):FTP_S3_BUCKET}
    FTP_HOST: ${file(./config.yml):${self:custom.stage}.FTP_HOST}
    FTP_PASSWORD: ${file(./config.yml):${self:custom.stage}.FTP_PASSWORD}
    FILENAME: ${file(./config.yml):FILENAME}
    FTP_PORT: ${file(./config.yml):FTP_PORT}
    FTP_USER: ${file(./config.yml):FTP_USER}
    FTP_REMOTE_PATH: ${file(./config.yml):FTP_REMOTE_PATH}
    STAGE: ${self:custom.stage}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "xray:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "*"
    - Effect: Allow
      Action:
        - athena:*
      Resource: "*"
    - Effect: Allow
      Action:
        - glue:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:*:*"
    - Effect: "Allow"
      Action:
        - "s3:PutBucketNotification"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"

functions:

  transfer:
    handler: transfer/index.handler
    timeout: 180
    deadLetter:
      sqs: transfer-dl-queue
    events:
      - schedule: cron(0 23 * * ? *)

  transform:
    handler: transform/index.handler
    timeout: 360
    deadLetter:
      sqs: transform-dl-queue
    events:
      - existingS3:
          bucket: "${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"
          events:
            - s3:ObjectCreated:*

  filter:
    handler: filter/index.handler
    timeout: 360
    deadLetter:
      sqs: filter-dl-queue
    events:
      - schedule: cron(0 23 * * ? *)

  formatted:
    handler: import/index.handler
    timeout: 360
    deadLetter:
      sqs: formatted-dl-queue
    events:
      - schedule: cron(0 23 * * ? *)

resources:
  Resources:
    # DynamoDB Tables
    CategoriesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "categories"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10

    BugatchiTable:
      Type: "AWS::DynamoDB::Table"
      Description: "Data Store for AWS AppSync Bugatchi Type"
      Properties:
        TableName: "bugatchi"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "N"
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10

    athenaS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicReadWrite
        BucketName: "${self:provider.environment.ATHENA_S3_BUCKET}-${self:custom.stage}"
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, HEAD, POST, DELETE]
              AllowedOrigins: ['*']
              Id: myCORSRuleId1
              MaxAge: '3600'

    S3BucketFtp:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicReadWrite
        BucketName: "${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, HEAD, POST, DELETE]
              AllowedOrigins: ['*']
              Id: myCORSRuleId1
              MaxAge: '3600'

    TransformLambdaPermissionFtpS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - TransformLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"

    AthenaProductsDB:
      Type: 'AWS::Glue::Database'
      Properties:
        DatabaseInput:
          Name: 'products'
        CatalogId:
          Ref: AWS::AccountId

package:
  include:
    - transfer/**
    - import/**
    - transform/**
  exclude:
    - test/**
    - .idea
    - docker-compose.yml
    - README.md





